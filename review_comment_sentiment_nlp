
https://www.zepl.com/UDXMSO8If/spaces/S_ZEPL/32c4e26210a54033b164d40f4e636923

%python
!pip install -q nltk
!pip install -q sklearn
!pip install -q string

import pandas as pd
import numpy as np
import nltk
from nltk.corpus import stopwords
import string
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import confusion_matrix, classification_report

reviews = ['very good review','very good review','very good review','very bad review','good review','bad review']
scores = [1,1,1,0,1,0]

nltk.download("stopwords")

def cleanup_text(review):
    cleanStr = [char for char in review if char not in string.punctuation]
    cleanStr = ''.join(cleanStr)
    #remove stop words
    return [word for word in cleanStr.split() if word.lower() not in stopwords.words('english')]

#cleanup, preprocess and vectorize text    
analyzedText = CountVectorizer(analyzer=cleanup_text).fit(reviews)
#build the train and test features with response variables 
X = analyzedText.transform(reviews)
y = scores
print('Shape of Sparse Matrix: ', X.shape)
print('Amount of Non-Zero occurences: ', X.nnz)    
density = (100.0 * X.nnz / (X.shape[0] * X.shape[1]))
print('density: {}'.format((density)))

print('X_train ->', X_train)
print('y_train ->', y_train)
print('X_test ->', X_test)
print('y_test ->', y_test)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)

#build the model
nb = MultinomialNB()
nb.fit(X_train, y_train)
preds = nb.predict(X_test)

print('preds ->', preds)

#evaluate model    
print(confusion_matrix(y_test, preds))
print('\n')
print(classification_report(y_test, preds))

#test the model
positive_review = reviews[4]
print('positive_review ->',positive_review)
positive_review_transformed = analyzedText.transform([positive_review])

print('positive_review_transformed ->',positive_review_transformed)
print('prediction ->', nb.predict(positive_review_transformed)[0])

negative_review = reviews[5]
print('negative_review ->',negative_review)

negative_review_transformed = analyzedText.transform([negative_review])
negative_review_transformed
print('negative_review_transformed ->',negative_review_transformed)
print('prediction ->',nb.predict(negative_review_transformed)[0])

#todo save the model 
# optimize the model
# feed more complex training data

